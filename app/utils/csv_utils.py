import pandas as pd
import io
import json
from pathlib import Path
import matplotlib.pyplot as plt
import uuid
import os
from datetime import datetime
from app.utils.pii_utils import mask_csv_pii  # üß© import mask CSV
import re

# ‚öôÔ∏è ƒê∆∞·ªùng d·∫´n l∆∞u data
MEMORY_PATH = Path("app/data/memory.json")
DATA_DIR = "app/data"
Path(DATA_DIR).mkdir(parents=True, exist_ok=True)

# ====================================================
# üß© H√ÄM PH√ÇN T√çCH CSV
# ====================================================
async def process_csv(file=None, url=None, question=None):
    """
    ƒê·ªçc CSV, mask PII, v√† tr·∫£ k·∫øt qu·∫£ theo c√¢u h·ªèi ng∆∞·ªùi d√πng.
    """
    # ƒê·ªçc file CSV
    if file:
        content = await file.read()
        df = pd.read_csv(io.BytesIO(content))
        temp_path = os.path.join(DATA_DIR, f"temp_{uuid.uuid4().hex}.csv")
        df.to_csv(temp_path, index=False)
        df = mask_csv_pii(temp_path)

    elif url:
        df = pd.read_csv(url)
        temp_path = os.path.join(DATA_DIR, f"temp_{uuid.uuid4().hex}.csv")
        df.to_csv(temp_path, index=False)
        df = mask_csv_pii(temp_path)
    else:
        raise ValueError("C·∫ßn file ho·∫∑c URL CSV!")

    # Chu·∫©n h√≥a c√¢u h·ªèi
    q = question.lower() if question else ""

    # C√°c lo·∫°i c√¢u h·ªèi
    if "t√≥m t·∫Øt" in q or "summary" in q:
        return str(df.describe(include='all'))

    elif ("missing" in q or "na" in q) and ("column" in q or "nhi·ªÅu" in q or "most" in q):
        col = df.isnull().sum().idxmax()
        return f"üß© The column with the most missing values is: '{col}'."

    elif "missing" in q or "na" in q:
        missing = df.isnull().sum().sort_values(ascending=False)
        return f"üîç Missing value summary:\n{missing.head()}"

    # 2Ô∏è‚É£ Th·ªëng k√™ c∆° b·∫£n cho c·ªôt s·ªë
    elif "basic stats" in q or "numeric" in q or "th·ªëng k√™" in q:
        numeric_df = df.select_dtypes(include=['number'])
        if numeric_df.empty:
            return "Kh√¥ng t√¨m th·∫•y c·ªôt s·ªë n√†o trong dataset."
        stats = numeric_df.describe().to_string()
        return f"üìä Basic statistics for numeric columns:\n{stats}"
    elif "histogram" in q or "hist" in q or "bi·ªÉu ƒë·ªì" in q:
        numeric_cols = df.select_dtypes(include=['number']).columns
        if len(numeric_cols) == 0:
            return "Kh√¥ng c√≥ c·ªôt s·ªë ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì!"
        col = numeric_cols[0]
        chart_path = os.path.join(DATA_DIR, f"{uuid.uuid4()}.png")
        plt.figure()
        df[col].hist()
        plt.title(f"Histogram c·ªßa {col}")
        plt.savefig(chart_path)
        plt.close()
        return f"ƒê√£ t·∫°o bi·ªÉu ƒë·ªì histogram cho '{col}' t·∫°i {chart_path}"

    else:
        return f"Dataset c√≥ {df.shape[0]} h√†ng v√† {df.shape[1]} c·ªôt."

# ====================================================
# üíæ H√ÄM L∆ØU L·ªäCH S·ª¨ CHAT
# ====================================================
def save_memory(user_msg: str, bot_reply: str):
    """
    L∆∞u l·ªãch s·ª≠ chat v√†o memory.json (format: {"history": [ ... ]})
    """
    MEMORY_PATH.parent.mkdir(parents=True, exist_ok=True)

    if MEMORY_PATH.exists():
        with open(MEMORY_PATH, "r", encoding="utf-8") as f:
            try:
                memory = json.load(f)
            except json.JSONDecodeError:
                memory = {"history": []}
    else:
        memory = {"history": []}

    if not isinstance(memory, dict):
        memory = {"history": []}
    if "history" not in memory or not isinstance(memory["history"], list):
        memory["history"] = []

    memory["history"].append({
        "user": user_msg,
        "bot": bot_reply,
        "time": datetime.now().strftime("%H:%M %d/%m/%y")
    })

    with open(MEMORY_PATH, "w", encoding="utf-8") as f:
        json.dump(memory, f, indent=2, ensure_ascii=False)
